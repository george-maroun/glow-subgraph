type GCCRetired @entity(immutable: true) {
  id: Bytes!
  account: User!
  rewardAddress: User! # address
  amountGCCRetired: BigInt! # uint256
  usdcEffect: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type USDCRetired @entity(immutable: true) {
  id: Bytes!
  account: User!
  rewardAddress: User! # address
  usdcEffect: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

enum ProposalType {
  VetoCouncilElectionOrSlash
  Grants
  RequestForComment
  GCAElectionOrSlash
  ChangeGCARequirements
}

interface Proposal @entity {
  id: ID!
  proposer: User! # Address of the proposer
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposalType: ProposalType!
  nominationsUsed: NominationsUsed!
}

type VetoCouncilElectionOrSlashProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  oldAgent: User!
  newAgent: User!
  slashOldAgent: Boolean!
  proposalType: ProposalType!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
}

type GCAElectionOrSlashProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  agentsToSlash: [User!]!
  newGCAs: [User!]!
  proposalType: ProposalType!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
}

type RFCProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  proposalType: ProposalType!
  hash: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
  # Other specific fields for RFCProposal
}

type GrantsProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  proposalType: ProposalType!
  hash: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
  recipient: User!
  amount: BigInt!

  #   event GrantsProposalCreation(
  #     uint256 indexed proposalId,
  #     address indexed proposer,
  #     address recipient,
  #     uint256 amount,
  #     bytes32 hash,
  #     uint256 nominationsUsed
  # );
  # Other specific fields for GrantsProposal
}

type ChangeGCARequirementsHashProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  proposalType: ProposalType!
  hash: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
}

type RetireGCCAllowance @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NominationsUsed @entity {
  id: ID!
  proposal: Proposal!
  nominationsUsed: BigInt!
  nominationBreakdown: [NominationSpend!]! @derivedFrom(field: "nominationsUsed")
}

type NominationSpend @entity(immutable: true) {
  id: ID!
  user: User!
  amount: BigInt!
  proposal: Proposal!
  nominationsUsed: NominationsUsed!
  transactionHash: Bytes!
}

type User @entity {
  id: ID!
  gccRetired: [GCCRetired!]! @derivedFrom(field: "account")
  usdcRetired: [USDCRetired!]! @derivedFrom(field: "account")
  totalUSDCEffect: BigInt!
  nominationSpendCounter: BigInt!
}
